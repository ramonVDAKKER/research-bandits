name: Tests

on:
  workflow_run:
    workflows: ["Linting"]
    types:
      - completed
    branches: [main, feature/*]
  workflow_dispatch:
  push:
    branches: [main, feature/*]
    paths:
      - 'backend/src/**/*.py'
      - 'backend/tests/**/*.py'
      - 'frontend/src/**/*.py'
      - 'frontend/tests/**/*.py'
      - '**/pyproject.toml'

permissions:
  contents: read

jobs:
  test:
    # Simplified condition - run on workflow_dispatch, push, or successful lint
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Debug workflow trigger
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Workflow run conclusion: ${{ github.event.workflow_run.conclusion }}"
          echo "Workflow run name: ${{ github.event.workflow_run.name }}"
          echo "Branch: ${{ github.ref }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install workspace dependencies
        run: |
          uv pip install --system -e .

      - name: Install backend dependencies
        run: |
          cd backend
          uv pip install --system -e .

      - name: Install frontend dependencies
        run: |
          cd frontend
          uv pip install --system -e .

      - name: Run backend tests
        run: |
          cd backend
          uv run pytest tests/ -v --cov=src/backend --cov-report=xml --cov-report=term

      - name: Run frontend tests
        run: |
          cd frontend
          uv run pytest tests/ -v --cov=src/frontend --cov-report=xml --cov-report=term

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./frontend/coverage.xml
          flags: frontend
          name: frontend-coverage
